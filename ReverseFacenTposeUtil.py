from PySide6 import QtCore, QtGui, QtWidgets
import sys

ROOT_RESOURCE_DIR = r'C:/Users/jajap/OneDrive/Documents/maya/2026/scripts'

class ReverseFaceNTposeDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle('ü§ì Reverse Face & T-pose Route')
        self.resize(890, 650)
        self.setStyleSheet('background-color: #6095FE;')

        self.mainLayout = QtWidgets.QVBoxLayout(self)
        self.mainLayout.setContentsMargins(0, 0, 0, 0)
        self.mainLayout.setSpacing(0)

        self.imageLabel = QtWidgets.QLabel()
        pixmap = QtGui.QPixmap(f'{ROOT_RESOURCE_DIR}/Lets_flirt_Papakorn/images/Reverse.png')
        scaled_pixmap = pixmap.scaled(
            QtCore.QSize(890, 500),
            QtCore.Qt.KeepAspectRatio,
            QtCore.Qt.SmoothTransformation
        )
        self.imageLabel.setPixmap(scaled_pixmap)
        self.imageLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.imageLabel.setStyleSheet('background-color: transparent;')
        self.mainLayout.addWidget(self.imageLabel, stretch=4)

        self.choiceWidget = QtWidgets.QWidget()
        self.choiceLayout = QtWidgets.QVBoxLayout(self.choiceWidget)
        self.choiceLayout.setAlignment(QtCore.Qt.AlignCenter)
        self.choiceLayout.setSpacing(15)
        self.choiceWidget.setStyleSheet('background: transparent;')
        self.mainLayout.addWidget(self.choiceWidget, alignment=QtCore.Qt.AlignCenter)
        self.choiceWidget.hide()

        textBox = QtWidgets.QFrame()
        textBox.setStyleSheet('''
            QFrame {
                background-color: white;
                border-top: 3px solid #b0c4ff;
            }
        ''')
        textBox.setFixedHeight(160)

        textLayout = QtWidgets.QHBoxLayout(textBox)
        textLayout.setContentsMargins(40, 15, 40, 15)

        self.textLabel = QtWidgets.QLabel()
        self.textLabel.setTextFormat(QtCore.Qt.RichText)
        self.textLabel.setWordWrap(True)
        self.textLabel.setAlignment(QtCore.Qt.AlignVCenter | QtCore.Qt.AlignLeft)
        self.textLabel.setStyleSheet('''
            color: #3A4E97;
            font-size: 20px;
            font-family: Candara;
        ''')
        textLayout.addWidget(self.textLabel, stretch=1)

        self.clickButton = QtWidgets.QPushButton('Click >>>')
        self.clickButton.setFixedSize(100, 40)
        self.clickButton.setCursor(QtCore.Qt.PointingHandCursor)
        self.clickButton.setStyleSheet('''
            QPushButton {
                color: #3A4E97;
                background-color: transparent;
                border: 2px solid #3A4E97;
                border-radius: 6px;
                font-size: 16px;
                font-family: Candara;
            }
            QPushButton:hover {
                background-color: #E6EBFF;
            }
        ''')
        self.clickButton.clicked.connect(self.nextDialogue)
        textLayout.addWidget(self.clickButton, alignment=QtCore.Qt.AlignBottom)

        self.mainLayout.addWidget(textBox, stretch=1)

        self.scenes = [
            {
                'text': '<b>‡∏õ‡∏†‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡∏î‡∏≥‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πÇ‡∏û‡∏™?</b><br>'
                        '"‡∏≠‡∏∂‡πâ‡∏á‡∏•‡πà‡∏∞‡∏™‡∏¥.. ‡∏â‡∏±‡∏ô‡∏Å‡πá‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏à‡∏∞‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß"',
                'choices': [
                    {'text': '‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πá‡∏Ñ‡∏ô‡πÑ‡∏ó‡∏¢‡πÅ‡∏ï‡πà‡∏ú‡∏¥‡∏ß‡πÑ‡∏õ‡∏Ñ‡∏ô‡∏•‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏¢‡∏ô‡∏∞', 'correct': False},
                    {'text': '‡∏Å‡∏î Reverse ‡πÉ‡∏ô Mesh Display ‡∏î‡πà‡∏ß‡∏ô‡∏ô', 'correct': True}
                ]
            },
            {
                'text': '<b>‡∏õ‡∏†‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡∏î‡∏≥‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πÇ‡∏û‡∏™?</b><br>'
                        '"‡πÅ‡∏ï‡πà‡∏ï‡∏±‡πâ‡∏á‡∏ó‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ô‡∏≤‡∏ô ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡πÅ‡∏´‡∏∞"',
                'choices': [
                    {'text': '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡πà‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏™‡πà joints ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡∏£‡∏¥‡∏Å ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏¢‡∏≠‡∏∞', 'correct': True},
                    {'text': '‡∏á‡∏±‡πâ‡∏ô‡∏°‡∏≤‡∏Ç‡∏¢‡∏±‡∏ö‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏Å‡∏±‡∏ô 1212312121', 'correct': False}
                ]
            },
            {
                'text': '<b>‡∏õ‡∏†‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡∏î‡∏≥‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πÇ‡∏û‡∏™?</b><br>'
                        '"‡πÄ‡∏ò‡∏≠‡∏ß‡πà‡∏≤.. ‡∏â‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°"',
                'choices': [
                    {'text': '‡∏ó‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏á‡πÅ‡∏Å‡πâ‡∏ô‡∏≤‡∏ô‡∏≠‡∏∞ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏ô‡∏∞', 'correct': False},
                    {'text': '‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏™‡∏¥ ‡∏°‡∏≤‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡πÅ‡∏Å‡πâ‡∏Å‡∏±‡∏ô‡πÑ‡∏õ‡∏ô‡∏∞', 'correct': True}
                ]
            }
        ]

        self.sceneIndex = 0
        self.waitingNextScene = False
        self.showScene(self.scenes[self.sceneIndex])

    def createChoiceButton(self, text, correct=False):
        btn = QtWidgets.QPushButton(text)
        btn.setFixedSize(350, 50)
        btn.setCursor(QtCore.Qt.PointingHandCursor)
        btn.setStyleSheet('''
            QPushButton {
                background-color: rgba(255, 255, 255, 0.3);
                color: white;
                font-size: 18px;
                border-radius: 10px;
                border: 2px solid rgba(255,255,255,0.5);
            }
            QPushButton:hover {
                background-color: rgba(255, 255, 255, 0.5);
            }
        ''')
        if correct:
            btn.clicked.connect(self.correctChoice)
        else:
            btn.clicked.connect(self.wrongChoice)
        return btn

    def showScene(self, scene):
        self.textLabel.setText(scene['text'])
        self.choiceWidget.hide()
        self.clickButton.show()
        if scene['choices']:
            self.updateChoices(scene['choices'])
        else:
            for i in reversed(range(self.choiceLayout.count())):
                self.choiceLayout.itemAt(i).widget().deleteLater()
        self.waitingNextScene = False

    def updateChoices(self, choices):
        for i in reversed(range(self.choiceLayout.count())):
            self.choiceLayout.itemAt(i).widget().deleteLater()
        for c in choices:
            btn = self.createChoiceButton(c['text'], correct=c['correct'])
            self.choiceLayout.addWidget(btn)

    def nextDialogue(self):
        if self.waitingNextScene:
            self.sceneIndex += 1
            if self.sceneIndex < len(self.scenes):
                self.showScene(self.scenes[self.sceneIndex])
            else:
                self.textLabel.setText('(‡πÄ‡∏Ç‡∏≤‡∏¢‡∏¥‡πâ‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô)\n‡∏õ‡∏†‡∏Å‡∏£‡∏ì‡πå‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏°‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏î‡∏ß‡∏á üíô')
                self.clickButton.hide()
        else:
            current_scene = self.scenes[self.sceneIndex]
            if current_scene['choices']:
                self.choiceWidget.show()
                self.clickButton.hide()
            else:
                self.sceneIndex += 1
                if self.sceneIndex < len(self.scenes):
                    self.showScene(self.scenes[self.sceneIndex])
                else:
                    self.textLabel.setText('(‡πÄ‡∏Ç‡∏≤‡∏¢‡∏¥‡πâ‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô)\n‡∏õ‡∏†‡∏Å‡∏£‡∏ì‡πå‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏°‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏î‡∏ß‡∏á üíô')
                    self.clickButton.hide()

    def correctChoice(self):
        if self.sceneIndex == 0:
            self.textLabel.setText('<b>‡∏õ‡∏†‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡∏î‡∏≥‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πÇ‡∏û‡∏™?</b><br>'
                                   '"‡πÇ‡∏≠‡πâ ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏Å‡πá‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏∞"')
        elif self.sceneIndex == 1:
            self.textLabel.setText('<b>‡∏õ‡∏†‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡∏î‡∏≥‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πÇ‡∏û‡∏™?</b><br>'
                                   '"‡∏â‡∏±‡∏ô‡∏û‡∏∂‡πà‡∏á‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏¥‡∏Å‡πÑ‡∏õ ‡∏û‡∏π‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏ô‡∏∂‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢"')
        elif self.sceneIndex == 2:
            self.textLabel.setText('<b>‡∏õ‡∏†‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡∏î‡∏≥‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πÇ‡∏û‡∏™?</b><br>'
                                   '"‡πÄ‡∏ò‡∏≠‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡πà‡∏á‡∏à‡∏±‡∏á ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∞"')

            new_pixmap = QtGui.QPixmap(f"{ROOT_RESOURCE_DIR}/Lets_flirt_Papakorn/images/Reverse_smile.png")
            scaled_pixmap = new_pixmap.scaled(
                QtCore.QSize(890, 500),
                QtCore.Qt.KeepAspectRatio,
                QtCore.Qt.SmoothTransformation
            )
            self.imageLabel.setPixmap(scaled_pixmap)

        self.choiceWidget.hide()
        self.clickButton.show()
        self.waitingNextScene = True

    def wrongChoice(self):
        msg = QtWidgets.QMessageBox(self)
        msg.setWindowTitle('ü§® ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏•‡∏Å‡πÄ‡∏´‡∏£‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö')
        msg.setText('"‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏Å‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏±‡πâ‡∏ô"')
        msg.setStyleSheet('QLabel{color:#3A4E97; font-size:27px;}')
        msg.exec()
        QtCore.QTimer.singleShot(1000, self.close)

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    dialog = LowPolyDialog()
    dialog.show()
    sys.exit(app.exec())
